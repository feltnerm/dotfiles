" vimrc
"
" Inspired heaviliy by @dwieeb: https://gitlab.com/dwieeb/dotfiles/blob/master/vimrc

set nocompatible
if &shell =~# 'fish$'
    set shell=sh
endif

"  --
"  Plugins
"  --
call plug#begin('~/.vim/plugged')

if !has('nvim')
    Plug 'tpope/vim-sensible'
endif

Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'neomake/neomake'
Plug 'sbdchd/neoformat'
Plug 'jaawerth/nrun.vim'
Plug 'Shougo/neoyank.vim'
Plug 'junegunn/vim-emoji'
Plug 'mattn/webapi-vim'
Plug 'tyru/open-browser.vim'
Plug 'mhinz/vim-startify'

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
    Plug 'zchee/deoplete-jedi'
    Plug 'zchee/deoplete-clang'
    Plug 'zchee/deoplete-go'
    Plug 'SevereOverfl0w/deoplete-github'
    Plug 'awetzel/elixir.nvim'
    Plug 'Shougo/context_filetype.vim'
    Plug 'Shougo/neopairs.vim'
    Plug 'Shougo/echodoc.vim'
    Plug 'Shougo/neoinclude.vim'
    Plug 'Konfekt/FastFold'
    Plug 'Shougo/neomru.vim'
else
    Plug 'Shougo/neocomplete.vim'
endif

" Unite
Plug 'Shougo/unite.vim'
Plug 'Shougo/unite-outline'
Plug 'tacroe/unite-mark'
Plug 'vim-scripts/unite-colorscheme'
Plug 'mattn/unite-nyancat'
Plug 'rhysd/unite-emoji.vim'
Plug 'lambdalisue/unite-grep-vcs'
Plug 'moznion/unite-git-conflict.vim'
Plug 'joker1007/unite-pull-request'
Plug 'rafi/vim-unite-issue'

Plug 'Raimondi/delimitMate'
Plug 'ervandew/supertab'
Plug 'vim-scripts/SearchComplete'
Plug 'dwieeb/vim-matchit'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-user'
Plug 'kshenoy/vim-signature'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'easymotion/vim-easymotion'
Plug 'wellle/targets.vim'
Plug 'vim-scripts/YankRing.vim'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
Plug 'davidbeckingsale/writegood.vim'
Plug 'artur-shaik/vim-javacomplete2'

"  --
"  Project
"  --
Plug 'Shougo/vimfiler.vim'
Plug 'airblade/vim-rooter'

"  --
"  Git plugins
"  --
Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'
Plug 'lambdalisue/vim-gita', {'on': ['Gita']}
Plug 'tpope/vim-fugitive'

"  --
"  Code Formatting
"  --
Plug 'editorconfig/editorconfig-vim'

"  --
"  UI
"  --
Plug 'morhetz/gruvbox'
Plug 'mhinz/vim-janah'
Plug 'altercation/vim-colors-solarized'
"Plug 'Solarized'
Plug 'Yggdroot/indentLine'
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'chriskempson/base16-vim'
Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plug 'machakann/vim-highlightedyank'
" Plug 'ryanoasis/vim-devicons'

"  --
"  Integrations
"  --

"" VimWiki
Plug 'vim-scripts/vimwiki'

"" Elm
Plug 'ElmCast/elm-vim'

"" Go
" Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'fatih/vim-go'
Plug 'Blackrush/vim-gocode'

"" Python
Plug 'davidhalter/jedi-vim'
Plug 'hynek/vim-python-pep8-indent'
Plug 'jmcantrell/vim-virtualenv'
Plug 'mitsuhiko/vim-jinja'
Plug 'mitsuhiko/vim-python-combined'

"" Groovy
""Plug 'vim.groovy'
Plug 'tfnico/vim-gradle'

"" Scala
Plug 'derekwyatt/vim-scala'
Plug 'mpollmeier/vim-scalaConceal'

"" Clojure
"Plug 'VimClojure'
"Plug 'Rainbow-Parenthesis'
Plug 'guns/vim-clojure-static'
Plug 'fwolanski/vim-clojure-conceal'
Plug 'kien/rainbow_parentheses.vim'
Plug 'vim-scripts/paredit.vim'
Plug 'tpope/vim-classpath'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-leiningen'
Plug 'tpope/vim-projectionist'
" Plug 'vim-clojure-highlight'

"" Javascript
" Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript-jsx'] }
" Plug 'kchmck/vim-coffee-script'
" Plug 'mxw/vim-jsx', { 'for': ['Javascript', 'Javascript-jsx'] }
" Plug 'node.js'
Plug '1995eaton/vim-better-javascript-completion'
Plug 'moll/vim-node'
Plug 'othree/jspc.vim'
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'gavocanov/vim-js-indent'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'othree/jsdoc-syntax.vim'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install && npm install -g tern' }
" Plug 'marijnh/tern_for_vim', { 'do': 'npm install && npm install -g tern' }
Plug 'ramitos/jsctags'
Plug 'ruanyl/vim-fixmyjs'
Plug 'jelera/vim-javascript-syntax'
Plug 'justinj/vim-react-snippets'

" Plug 'vim-scripts/JavaScript-Indent'

"" Markdown
Plug 'github/markup'
Plug 'tpope/vim-markdown'

"" YAML
Plug 'stephpy/vim-yaml'

"" HTML5
Plug 'othree/html5.vim'

"" CSS
Plug 'cakebaker/scss-syntax.vim'
Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'

"" GLSL
Plug 'tikhomirov/vim-glsl'

"" Rust
Plug 'rust-lang/rust.vim'

Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

call plug#end()

filetype plugin indent on
syntax enable

" --
" vim-filer settings
" --
let g:vimfiler_as_default_explorer = 1
nmap <leader>d :VimFiler -buffer-name=explorer -simple -toggle<CR>
nmap <leader>de :VimFiler -buffer-name=explorer -toggle<CR>
nmap <leader>df :VimFilerBufferDir -buffer-name=explorer -toggle<CR>

" --
"  rust.vim settings
" --

let g:rustfmt_autosave = 1

" --
" Gundo
" --

nmap <leader>g :GundoToggle<CR>

" --
" Git Gutter
" --

let g:gitgutter_realtime = 1

" --
" Neomake
" --

" --
" Neoformat
" --
autocmd FileType javascript.jsx set formatprg=prettier-standard
autocmd BufWritePre *.js Neoformat
autocmd BufWritePre *.jsx Neoformat
let g:neoformat_try_formatprg = 1
" Enable alignment
let g:neoformat_basic_format_align = 1

" Enable tab to spaces conversion
let g:neoformat_basic_format_retab = 1

" Enable trimmming of trailing whitespace
let g:neoformat_basic_format_trim = 1
" --
"  airline settings
" --

let g:airline_theme = 'gruvbox'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 1

" --
"  Unite settings
" --

let g:unite_prompt = '≥≥ '
let g:unite_source_history_yank_enable = 1
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#profile('default', 'context', {
            \  'start-insert': 1,
            \  'smartcase': 1
            \  })
call unite#custom#source('buffer, file, file_rec, file_mru, file_rec/async, file_rec/git', 'sorters', 'sorter_selecta')
call unite#custom#source('buffer, file, file_rec, file_mru, file_rec/async, file_rec/git', 'matchers', [
            \ 'converter_file_directory',
            \ 'matcher_fuzzy'
            \ ])
" \ 'matcher_glob',

if executable('rg')
    let g:unite_source_grep_command = 'rg'
    let g:unite_source_grep_default_opts = '--no-heading --vimgrep --smart-case'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'

    let g:unite_source_rec_async_command = [
                \ 'rg',
                \ '--files', '--no-heading', '--vimgrep', '--smart-case',
                \ '--glob', '']

elseif executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--smart-case --nogroup --nocolor --context 0 --home-ptignore --global-gitignore'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
elseif executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
                \ '-S --vimgrep --hidden --ignore ' .
                \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
endif

" --
"  Unite mark settings
" --

let g:unite_source_mark_marks =
            \   "abcdefghijklmnopqrstuvwxyz"
            \ . "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

" --
"  neocomplete/deoplete settings
" --

set completeopt+=noinsert
let g:acp_enableAtStartup = 0

if has("nvim")
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#omni#functions = {}
    let g:deoplete#omni#functions.javascript = [
                \ 'tern#Complete',
                \ 'jspc#omni',
                \ 'elm',
                \ '\.'
                \ ]
    "
    " Use tern_for_vim.
    let g:tern_request_timeout = 1
    let g:tern_show_signuate_in_pum = '0'
    let g:tern#filetypes = [
                \ 'javascript',
                \ 'jsx',
                \ 'javascript.jsx'
                \ ]

    let g:deoplete#sources = {}
    let g:deoplete#sources['javascript'] = ['member', 'file', 'ternjs']
    let g:deoplete#sources['jsx'] = ['member', 'file', 'ternjs']
    let g:deoplete#sources['javascript.jsx'] = ['member', 'file', 'ternjs']
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']

    " deoplete github integration for commit messages
    "
    let g:deoplete#keyword_patterns = {}
    let g:deoplete#keyword_patterns.gitcommit = '.+'

else
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    "call neocomplete#util#set_default_dictionary(
    "\ 'g:neocomplete#sources#omni#input_patterns',
    "\ 'elm',
    "\ '\.')
endif

" --
" Indentline
" --

let g:indentLine_char = '│'

" --
" Delimitmate
" --

let delimitMate_expand_cr = 1

" --
" vimwiki
" --

let g:vimwiki_list = [{
            \ 'auto_export': 1,
            \ 'path': expand("~/Dropbox/vimwiki"),
            \ 'path_html': expand("~/Dropbox/vimwiki_html"),
            \ 'template_path': expand("~/Dropbox/vimwiki/_templates"),
            \ 'template_default': "default",
            \ 'template_ext': ".html",
            \ 'css_name': "_css/style.css",
            \ 'nested_syntaxes': {'python': 'python'}
            \ }]

"  --
"  Elm
"  --
let g:elm_setup_keybindings = 0
let g:elm_format_autosave = 1
let g:elm_jump_to_error = 0
let g:elm_make_output_file = "elm.js"
let g:elm_make_show_warnings = 1
let g:elm_detailed_complete = 1
let g:elm_classic_highlighting = 0

" --
"  Autoloaders
"  --
autocmd! bufwritepost .vimrc source %

" no trailing whitespace
autocmd BufWritePre * %s/\s\+$//e



" --
" SuperTab
" --

" --
" quick-scope
" --
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" let g:qs_first_occurrence_highlight_color = 155


" --
" neosnippet
" --
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets'
let g:neosnippet#enable_snipmate_compatibility = 1
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" For conceal markers.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif

" --
" Git
" --

autocmd FileType git,gitcommit setlocal foldmethod=syntax foldlevel=1
autocmd FileType gitcommit setlocal spell
" autocmd FileType gitcommit WritegoodEnable
autocmd FileType gitrebase nnoremap <buffer> S :Cycle<CR>

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" --
" Tex/tMarkdown
" --

au BufNewFile,BufRead *.md set filetype=markdown
autocmd FileType liquid,markdown,text,txt setlocal tw=78 linebreak nolist
autocmd FileType markdown setlocal spell
autocmd FileType markdown WritegoodEnable

" --
" Shell Scripts
" --

autocmd FileType sh,zsh,csh,tcsh    inoremap <silent> <buffer> <C-X>! #!/bin/<C-R>=&ft<CR>
autocmd FileType perl,python,ruby   inoremap <silent> <buffer> <C-X>! #!/usr/bin/env<Space><C-R>=&ft<CR>

" --
" JavaScript
" --
let g:jsx_ext_required = 0
let g:vim_json_syntax_conceal = 0

" vim-fixmyjs
let g:fixmyjs_use_local = 1
noremap <Leader><Leader>f :Fixmyjs<CR>

" --
" Java
" --
autocmd FileType java setlocal omnifunc=javacomplete#Complete


" --
" Overtone
" --

autocmd BufRead,BufNewFile *.clj    set filetype=clojure
autocmd FileType clojure            nnoremap <leader>r :Require<CR>
autocmd FileType clojure            nnoremap <leader>e :Eval<CR>
autocmd FileType clojure            nnoremap <leader>E :%Eval<CR>
autocmd FileType clojure            RainbowParenthesesToggle
autocmd FileType clojure            RainbowParenthesesLoadRound
autocmd FileType clojure            RainbowParenthesesLoadSquare
autocmd FileType clojure            RainbowParenthesesLoadBraces

"  --
"  General Settings
"  --
map <space> <leader>

" read modeline from files
set modeline

" watch for file changes
set autoread

" set esckeys
set timeoutlen=1000 ttimeoutlen=0

" ---
" Searching
" ---

" set magic on, for regular expressions
set magic

" don't highlight search results
set nohlsearch

" incremental search
set incsearch

" ignore case when searching
set ignorecase

" For use use artificial intelligence whilst searching
set smartcase

" Highlight searches
set hlsearch

" Highlight searches dynamically
set incsearch

" Let me hide a buffer with changes
set hidden

" Use a better `grep` when searching via '/'
if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif



" ---
" Backup
" ---

set backupcopy=yes
set backupdir=~/.vim/backup
silent !mkdir -p ~/.vim/backup > /dev/null 2>&1
set directory=~/.vim/tmp
silent !mkdir -p ~/.vim/tmp> /dev/null 2>&1
set undodir=~/.vim/undo
silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
if exists('+undofile')
    set undofile
endif

" ---
" Bells/Sound
" ---

set noerrorbells
set novisualbell
set t_vb=

" --
" File Formats and Encodings
" ---

set encoding=utf-8
set ffs=unix,mac,dos
set fileformats=unix,mac,dos
scriptencoding utf-8
set encoding=utf-8 nobomb

" ---
" Code Formatting
" ---

set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set nowrap
set nojoinspaces
set listchars=tab:>~,nbsp:_,trail:.
"
" javascript
" au BufEnter *.js let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
" au BufEnter *.js let b:neomake_javascript_eslint_exe = nrun#Which('standard')
" au BufEnter *.jsx let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
" au BufEnter *.jsx let b:neomake_javascript_eslint_exe = nrun#Which('standard')

autocmd Filetype javascript.jsx let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
autocmd Filetype javascript.jsx setlocal tabstop=2 shiftwidth=2 softtabstop=0
autocmd FileType javascript.jsx set formatprg=prettier-standard

" ---
" Diff
" ---

" Add vertical spaces to keep right and left aligned
set diffopt=filler

" Ignore whitespace changes (focus on code changes)
set diffopt+=iwhite
set diffopt+=vertical

" ---
" Apperance and UI Settings
" ---

set t_Co=256
set number
set relativenumber
set numberwidth=5
set ruler
set showcmd
set cmdheight=1
" Always show status line
set laststatus=2
set more
set scrolloff=1
set sidescrolloff=1
set timeoutlen=1200
set ttimeoutlen=50
set showmatch

" splitting a window will put the new window below the current one
set splitbelow

set title
set hlsearch
set cursorline
set list
set colorcolumn=80

set background=dark
" colorscheme tomorrow-night
colorscheme gruvbox
set termguicolors

" ---
" Folds
" ---

set foldenable
set foldlevelstart=10
set foldmethod=indent

" ---
" Spellcheck
" ---

try
    lang en_US
catch
    set dictionary+=/usr/share/dict/words
    set spelllang=en_us
    "if exists("+spelllang")
    "endif
    set spellfile=~/.vim/spell/en.utf-8.add
endtry

" ---
" Performance
" ---

" fast terminal
set ttyfast

" Redraw when executing macros
if !has("nvim")
    set lazyredraw
end

" how many tenths of a second to blink
set mat=2

" timeout length for keypresses
set tm=500

" ---
" Paste
" ---

"set paste
set pastetoggle=<F2>
set clipboard=unnamed
" if has('clipboard')
"     if has('unnamedplus')
"       set clipboard=unnamedplus
"     else
"       set clipboard=unnamed
"     endif
" endif

" ---
" Backspacing
" ---

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ---
" Tab completion
" ---

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,node_modules,build,indexes,out
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*.db,*.o,*.obj
set wildignore+=*.swp,*.bak,*.lock
set wildignore+=*.git,*.svn
set wildignore+=*DS_Store*
set wildignore+=**/tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.app,*.dmg,*.pdf,*.so
set completeopt-=preview

" ---
" Mouse
" ---

set mouse=a
set mousehide

"  --
"  Keybindings
"  --
nore ; :
inoremap jj <Esc>
inoremap jk <Esc>
vnoremap <ESC> <C-c>
imap ii <C-[>

" --
"  Tabs
"  --
"
let notabs = 1
noremap <leader><Tab> :tabnext<CR>
noremap <leader><S-Tab> :tabprev<CR>
noremap <leader>tn :tabnext<CR>
noremap <leader>tp :tabprev<CR>
noremap <leader>tw :tabnew<CR>
noremap <leader>tc :tabclose<CR>

" Fuck help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Move between splits using hjkl
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Create splits
map <leader>sw :split<cr>
map <leader>sv :vsplit<cr>

" move to beginning/end of line
nnoremap B ^
nnoremap E $


" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" turn off search highlight
nnoremap <leader>/ :nohlsearch<CR>

" highlight last inserted text
nnoremap gV `[v`]

vnoremap < <gv
vnoremap > >gv

" W" Ex mode: no ty
map Q <Nop>

" Disable accidental macro recording when I spaz out on the q key
map qq <Nop>

" Unite
nnoremap <Leader>p :Unite -wrap -start-insert -no-split -no-resize -buffer-name=search grep:!<cr>
nnoremap <Leader>pf :Unite -start-insert -no-split -no-resize -buffer-name=files -force-redraw file_rec/async:!<cr>
nnoremap <Leader>pr :Unite -start-insert -no-split -no-resize -buffer-name=mostrecentfiles -force-redraw file_mru<cr>
nnoremap <Leader>pb :Unite -start-insert -no-split -no-resize -buffer-name=buffers buffer<cr>
nnoremap <Leader>pg :Unite -wrap -start-insert -no-split -no-resize -buffer-name=gitgrep grep/git:.<cr>
nnoremap <Leader>pG :Unite -start-insert -no-split -no-resize -buffer-name=gitfiles file_rec/git<cr>
nnoremap <Leader>py :Unite -start-insert -buffer-name=yanks history/yank<cr>
nnoremap <Leader>po :Unite -start-insert -buffer-name=outline outline<cr>
nnoremap <Leader>ps :Unite -start-insert -buffer-name=snippets neosnippet/user:expand neosnippet:expand<cr>

" Neocomplete
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Commands
command! W w
command! Q q

cmap w!! w !sudo tee % >/dev/null
