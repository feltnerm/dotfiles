" vimrc
"
" Inspired heaviliy by @dwieeb: https://gitlab.com/dwieeb/dotfiles/blob/master/vimrc

set nocompatible

"  --
"  Vundle
"  --
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Bundle 'VundleVim/Vundle.vim'

Bundle 'Shougo/vimproc.vim'
Bundle 'tpope/vim-sensible'

Bundle 'Shougo/unite-outline'
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/neoyank.vim'
Bundle 'tacroe/unite-mark'
Bundle 'unite-colorscheme'
if has("nvim")
    Bundle 'Shougo/deoplete.nvim'
else
    Bundle 'Shougo/neocomplete.vim'
endif
Bundle 'Raimondi/delimitMate'
Bundle 'SearchComplete'
Bundle 'TaskList.vim'
Bundle 'airblade/vim-rooter'
Bundle 'dwieeb/vim-matchit'
Bundle 'kana/vim-textobj-indent'
Bundle 'kana/vim-textobj-user'
Bundle 'kshenoy/vim-signature'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'scrooloose/nerdcommenter'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-eunuch'
Bundle 'tpope/vim-obsession'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'unblevable/quick-scope'
Bundle 'wellle/targets.vim'
Bundle 'YankRing.vim'

"  --
"  Project
"  --
Bundle 'scrooloose/nerdtree'
Bundle 'Xuyuanp/nerdtree-git-plugin'
Bundle 'shemerey/vim-project'

"  --
"  Git plugins
"  --
Bundle "mhinz/vim-signify"
Bundle 'airblade/vim-gitgutter'
Bundle 'gregsexton/gitv'
Bundle 'tpope/vim-fugitive'

"  --
"  Code Formatting
"  --
Bundle 'editorconfig/editorconfig-vim'

"  --
"  UI
"  --
Bundle 'altercation/vim-colors-solarized'
"Bundle "Solarized"
Bundle 'Yggdroot/indentLine'
Bundle 'edkolev/tmuxline.vim'
Bundle 'flazz/vim-colorschemes'
Bundle 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'chriskempson/base16-vim'
Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}

"  --
"  Integrations
"  --

"" VimWiki
Bundle 'vimwiki'

"" Elm
Bundle 'ElmCast/elm-vim'

"" Go
Bundle 'fatih/vim-go'
Bundle 'Blackrush/vim-gocode'

"" Python
Bundle 'davidhalter/jedi-vim'
Bundle 'hynek/vim-python-pep8-indent'
Bundle 'jmcantrell/vim-virtualenv'
Bundle 'mitsuhiko/vim-jinja'
Bundle 'mitsuhiko/vim-python-combined'

"" Groovy
""Bundle 'vim.groovy'
Bundle 'tfnico/vim-gradle'

"" Scala
Bundle 'derekwyatt/vim-scala'
Bundle 'mpollmeier/vim-scalaConceal'

"" Clojure
"Bundle 'VimClojure'
"Bundle 'Rainbow-Parenthesis'
Bundle "guns/vim-clojure-static"
Bundle 'fwolanski/vim-clojure-conceal'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'paredit.vim'
Bundle 'tpope/vim-classpath'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-leiningen'
Bundle 'tpope/vim-projectionist'
Bundle 'vim-clojure-highlight'

"" Javascript
Bundle 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript-jsx'] }
Bundle 'kchmck/vim-coffee-script'
Bundle 'mxw/vim-jsx', { 'for': ['Javascript', 'Javascript-jsx'] }
Bundle 'node.js'
" Plugin 'othree/yajs.vim'

"" Markdown
Bundle 'github/markup'
Bundle 'tpope/vim-markdown'
Bundle 'wikimatze/hammer.vim'

"" YAML
Bundle 'stephpy/vim-yaml'

"" HTML5
Bundle 'othree/html5.vim'

"" CSS
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'groenewege/vim-less'
Bundle 'hail2u/vim-css3-syntax'

"" GLSL
Bundle "tikhomirov/vim-glsl"

"" Rust
Bundle 'rust-lang/rust.vim'

Bundle 'scrooloose/syntastic'
Bundle 'mtscout6/syntastic-local-eslint.vim'

call vundle#end()            " required

filetype plugin indent on
syntax enable

" --
"  rust.vim settings
" --

let g:rustfmt_autosave = 1

"  --
"  NERDCommenter
"  --
let g:NERDSpaceDelims = 1

" --
" NERDTree - filesystem
" --

nmap <leader>d :NERDTreeToggle<CR>

" --
" TaskList
" --

nmap <Leader>tl :TaskList<CR>

" --
" Gundo
" --

nmap <leader>g :GundoToggle<CR>

" --
" Git Gutter
" --

let g:gitgutter_realtime = 1

" --
" --
"  syntastic settings
" --

if executable('python3')
    let g:syntastic_python_python_exec = 'python3'
endif

if executable('eslint')
    let g:syntastic_javascript_checkers = [ 'eslint' ]
endif

let g:syntastic_typescript_checkers=[] " can't use until typescript 2

let g:syntastic_html_tidy_ignore_errors = [
    \ 'trimming empty <i>' ]
let g:syntastic_quiet_messages = {
    \ "type": "style",
    \ "regex": "main redeclared in this block"}

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

" --
"  airline settings
" --

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_theme = 'tomorrow'

" --
"  Unite settings
" --

call unite#custom#source('file_rec, file_rec/async, file_rec/git', 'matchers', ['converter_relative_word', 'matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#profile('default', 'context.smartcase', 1)
call unite#custom#profile('default', 'context.ignorecase', 1)
let g:unite_prompt = '≥≥ '
let g:unite_source_history_yank_enable = 1

let g:unite_source_rec_async_command = ['ack', '-f', '--nofilter']
if executable('ag')
    let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
        \ '-S --vimgrep --hidden --ignore ' .
        \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
endif

" --
"  Unite mark settings
" --

let g:unite_source_mark_marks =
            \   "abcdefghijklmnopqrstuvwxyz"
            \ . "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

" --
"  neocomplete/deoplete settings
" --

let g:acp_enableAtStartup = 0

if has("nvim")
    let g:deoplete#enable_at_startup = 1
else
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
endif
"call neocomplete#util#set_default_dictionary(
  "\ 'g:neocomplete#sources#omni#input_patterns',
  "\ 'elm',
  "\ '\.')
" --
"  tmuxline settings
" --

" :Tmuxline airline to set manual colors
" :TmuxlineSnapshot! tmuxline.conf to save colors
let g:tmuxline_preset = 'nightly_fox'
let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '>',
    \ 'right' : '',
    \ 'right_alt' : '<',
    \ 'space' : ' '}

" --
" Indentline
" --

let g:indentLine_char = '│'

" --
" Delimitmate
" --

let delimitMate_expand_cr = 1

" --
" vimwiki
" --

let g:vimwiki_list = [{
            \ 'auto_export': 1,
            \ 'path': expand("~/Dropbox/vimwiki"),
            \ 'path_html': expand("~/Dropbox/vimwiki_html"),
            \ 'template_path': expand("~/Dropbox/vimwiki/_templates"),
            \ 'template_default': "default",
            \ 'template_ext': ".html",
            \ 'css_name': "_css/style.css",
            \ 'nested_syntaxes': {'python': 'python'}
            \ }]

"  --
"  Elm
"  --
let g:elm_format_autosave = 1
let g:elm_syntastic_show_warnings = 1
let g:elm_jump_to_error = 0
let g:elm_make_output_file = "elm.js"
let g:elm_make_show_warnings = 0
let g:elm_syntastic_show_warnings = 0
let g:elm_detailed_complete = 0
let g:elm_format_autosave = 0
let g:elm_setup_keybindings = 1
let g:elm_classic_highlighting = 0

" --
"  Autoloaders
"  --
autocmd! bufwritepost .vimrc source %

" --
" Git
" --

autocmd FileType git,gitcommit setlocal foldmethod=syntax foldlevel=1
autocmd FileType gitcommit setlocal spell
autocmd FileType gitrebase nnoremap <buffer> S :Cycle<CR>

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" --
" Tex/tMarkdown
" --

au BufNewFile,BufRead *.md set filetype=markdown
autocmd FileType liquid,markdown,text,txt setlocal tw=78 linebreak nolist
autocmd FileType markdown setlocal spell

" --
" Shell Scripts
" --

autocmd FileType sh,zsh,csh,tcsh    inoremap <silent> <buffer> <C-X>! #!/bin/<C-R>=&ft<CR>
autocmd FileType perl,python,ruby   inoremap <silent> <buffer> <C-X>! #!/usr/bin/env<Space><C-R>=&ft<CR>

" --
" Overtone
" --

autocmd BufRead,BufNewFile *.clj    set filetype=clojure
autocmd FileType clojure            nnoremap <leader>r :Require<CR>
autocmd FileType clojure            nnoremap <leader>e :Eval<CR>
autocmd FileType clojure            nnoremap <leader>E :%Eval<CR>
autocmd FileType clojure            RainbowParenthesesToggle
autocmd FileType clojure            RainbowParenthesesLoadRound
autocmd FileType clojure            RainbowParenthesesLoadSquare
autocmd FileType clojure            RainbowParenthesesLoadBraces

"  --
"  General Settings
"  --
map <space> <leader>
set shell=/bin/bash

" read modeline from files
set modeline

" watch for file changes
set autoread

set esckeys

" ---
" Searching
" ---

" set magic on, for regular expressions
set magic

" don't highlight search results
set nohlsearch

" incremental search
set incsearch

" ignore case when searching
set ignorecase

" For use use artificial intelligence whilst searching
set smartcase

" Highlight searches
set hlsearch

" Highlight searches dynamically
set incsearch

" Always show status line
set laststatus=2

" Let me hide a buffer with changes
set hidden

" ---
" Backup
" ---

set backupcopy=yes
set backupdir=~/.vim/backup
silent !mkdir -p ~/.vim/backup > /dev/null 2>&1
set directory=~/.vim/tmp
silent !mkdir -p ~/.vim/tmp> /dev/null 2>&1
set undodir=~/.vim/undo
silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
if exists('+undofile')
  set undofile
endif

" ---
" Bells/Sound
" ---

set noerrorbells
set novisualbell
set t_vb=

" --
" File Formats and Encodings
" ---

set encoding=utf-8
set ffs=unix,mac,dos
set fileformats=unix,mac,dos
scriptencoding utf-8
set encoding=utf-8 nobomb

" ---
" Code Formatting
" ---

set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set nowrap
set nojoinspaces
set listchars=tab:>~,nbsp:_,trail:.

" ---
" Diff
" ---

" Add vertical spaces to keep right and left aligned
set diffopt=filler

" Ignore whitespace changes (focus on code changes)
set diffopt+=iwhite
set diffopt+=vertical

" ---
" Apperance and UI Settings
" ---

set t_Co=256
set number
set relativenumber
set numberwidth=5
set ruler
set showcmd
set cmdheight=2
set laststatus=2
"set statusline=\ %F%m%r%h\ %
set more
set scrolloff=1
set sidescrolloff=1
set timeoutlen=1200
set ttimeoutlen=50
set showmatch

" splitting a window will put the new window below the current one
set splitbelow

set title
set hlsearch
set cursorline
set list
set colorcolumn=80

set background=dark
colorscheme tomorrow-night

" ---
" Folds
" ---

set foldenable
set foldlevelstart=10
set foldmethod=indent

" ---
" Spellcheck
" ---

try
    lang en_US
catch
set dictionary+=/usr/share/dict/words
set spelllang=en_us
"if exists("+spelllang")
"endif
set spellfile=~/.vim/spell/en.utf-8.add
endtry

" ---
" Performance
" ---

" fast terminal
set ttyfast

" Redraw when executing macros
if !has("nvim")
    set lazyredraw
end

" how many tenths of a second to blink
set mat=2

" timeout length for keypresses
set tm=500

" ---
" Paste
" ---

"set paste
set pastetoggle=<F2>
if has('clipboard')
    if has('unnamedplus')
      set clipboard=unnamedplus
    else
      set clipboard=unnamed
    endif
endif

" ---
" Backspacing
" ---

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ---
" Tab completion
" ---

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,node_modules,build,indexes,out
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*.db,*.o,*.obj
set wildignore+=*.swp,*.bak,*.lock
set wildignore+=*.git,*.svn
set wildignore+=*DS_Store*
set wildignore+=**/tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.app,*.dmg,*.pdf,*.so
set completeopt-=preview

" ---
" Mouse
" ---

set mouse=a
set mousehide

"  --
"  Keybindings
"  --
nore ; :
nore , ;
inoremap jj <Esc>
inoremap jk <Esc>
vnoremap <ESC> <C-c>
imap ii <C-[>

" --
"  Tabs
"  --
"
let notabs = 1
noremap <leader><Tab> :tabnext<CR>
noremap <leader><S-Tab> :tabprev<CR>
noremap <leader>tn :tabnext<CR>
noremap <leader>tp :tabprev<CR>
noremap <leader>tw :tabnew<CR>
noremap <leader>tc :tabclose<CR>

" Fuck help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Move between splits using hjkl
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Create splits
map <leader>sw :split<cr>
map <leader>sv :vsplit<cr>

" move to beginning/end of line
nnoremap B ^
nnoremap E $


" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" highlight last inserted text
nnoremap gV `[v`]

vnoremap < <gv
vnoremap > >gv

" W" Ex mode: no ty
map Q <Nop>

" Disable accidental macro recording when I spaz out on the q key
map qq <Nop>hen you forget to sudo:

" Unite
nnoremap <Leader>p :Unite -start-insert -no-split -no-resize file_rec/async<cr>
nnoremap <Leader>f :Unite -start-insert -no-split -no-resize file file/new directory/new<cr>
nnoremap <Leader>b :Unite -start-insert -no-split -no-resize buffer<cr>
nnoremap <Leader>y :Unite -start-insert -no-split -no-resize history/yank<cr>
nnoremap <Leader>o :Unite -start-insert -no-split -no-resize outline<cr>
nnoremap <Leader>/ :Unite -start-insert -no-split -no-resize -no-empty grep:.<cr>

" Neocomplete
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" Commands
command! W w
command! Q q

cmap w!! w !sudo tee % >/dev/null
